unit modItemPecasPadrao;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Imaging.pngimage, Vcl.Grids, Vcl.DBGrids, JvExStdCtrls, JvEdit,
  JvValidateEdit, Vcl.DBCtrls, Vcl.ComCtrls, Data.DB;

type
  TfrmItemPecaPadrao = class(TForm)
    rdgOpcoesPesquisa: TRadioGroup;
    grpConteudoPesquisa: TGroupBox;
    edtConteudoPesquisa: TEdit;
    impPesquisar: TImage;
    imgConfirmar: TImage;
    imgSair: TImage;
    grpMensagem: TGroupBox;
    lblMsg: TLabel;
    grpInformacoesItem: TGroupBox;
    grpInformacoesGerais: TGroupBox;
    grdPecas: TDBGrid;
    grpQuantidade: TGroupBox;
    grpValorUnitario: TGroupBox;
    grpDataUtilizacao: TGroupBox;
    grpTecnicoResponsavel: TGroupBox;
    edtQuantidade: TJvValidateEdit;
    edtValorUnitario: TJvValidateEdit;
    dtpDataUtilizacao: TDateTimePicker;
    cboTecnicoResponsavel: TDBLookupComboBox;
    rdgTipoPeca: TRadioGroup;
    procedure FormCreate(Sender: TObject);
    procedure grdPecasDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure imgSairClick(Sender: TObject);
    procedure imgConfirmarClick(Sender: TObject);
    procedure edtConteudoPesquisaEnter(Sender: TObject);
    procedure edtConteudoPesquisaKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edtConteudoPesquisaKeyPress(Sender: TObject; var Key: Char);
    procedure edtQuantidadeKeyPress(Sender: TObject; var Key: Char);
    procedure edtConteudoPesquisaExit(Sender: TObject);
    procedure rdgOpcoesPesquisaClick(Sender: TObject);
    procedure grdPecasDblClick(Sender: TObject);
    procedure grdPecasKeyPress(Sender: TObject; var Key: Char);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
    procedure LimparMSG_ERRO;
    function AbrirTabelaProdutos(pOpcao: smallint; pConteudo: string): boolean;
    function PesquisarItensOSPecas:boolean;
    function Selecionar_TipoPreço:boolean;
  public
    { Public declarations }
  end;

var
  frmItemPecaPadrao: TfrmItemPecaPadrao;

implementation

{$R *.dfm}

uses dataDBEXMaster, dataMProvider, dataMSource, dataMSProcedure,
  uConstantes_Padrao, uFuncoes, modOrdemServico;

function TfrmItemPecaPadrao.PesquisarItensOSPecas:boolean;
var
  sWhere:string;
begin

  LimparMSG_ERRO;

  try

    dmDBEXMaster.fdqMasterPesquisa.Close;
    dmDBEXMaster.fdqMasterPesquisa.SQL.Clear;
    dmDBEXMaster.fdqMasterPesquisa.SQL.Add('SELECT * FROM ITENS_OS_PECAS');
    dmDBEXMaster.fdqMasterPesquisa.SQL.Add('WHERE CODIGO_PECA = ' + IntToStr(dmMProvider.cdsPesqProdutosPRODUTO.Value));
    dmDBEXMaster.fdqMasterPesquisa.SQL.Add('AND ORDEM_SERVICO = ' + IntToStr(dmMProvider.cdsOrdemServicoORDEM_DE_SERVICO.Value));
    dmDBEXMaster.fdqMasterPesquisa.Open;

    Result := dmDBEXMaster.fdqMasterPesquisa.IsEmpty;

    dmDBEXMaster.fdqMasterPesquisa.Close;

   except
    on E: exception do
      lblMsg.Caption := dmDBEXMaster.sNomeUsuario+ ', ' + Tratar_Erro_Conexao(E);

  end;

end;

procedure TfrmItemPecaPadrao.rdgOpcoesPesquisaClick(Sender: TObject);
begin

  edtConteudoPesquisa.Clear;
  edtConteudoPesquisa.SetFocus;

end;

function TfrmItemPecaPadrao.Selecionar_TipoPreço: boolean;
begin

  if (dmMProvider.cdsUsuariosSUPER_USUARIO.Value = 1) or (dmDBEXMaster.sNomeUsuario = 'SYSDBA')then
  begin

    if dmMProvider.cdsPesqProdutosPRECODEVENDA.Value <= 0 then
    begin

      lblMsg.Caption  := dmDBEXMaster.sNomeUsuario + MSG_VALIDAR_PRECO_VENDA;
      Application.ProcessMessages;

      Result          := dmMProvider.cdsPesqProdutosPRECODEVENDA.Value > 0;

    end
    else
    begin

      lblMsg.Tag      := ord(SelecionarCustoVendaPeca);
      lblMsg.Caption  := dmDBEXMaster.sNomeUsuario + MSG_SELECIONAR_PRECO_PECA_OD;
      Application.ProcessMessages

    end;

  end
  else
  begin

    if dmMProvider.cdsPesqProdutosPRECODEVENDA.Value <= 0 then
    begin

      lblMsg.Caption  := dmDBEXMaster.sNomeUsuario + MSG_VALIDAR_PRECO_VENDA;
      Application.ProcessMessages;

      Result          := dmMProvider.cdsPesqProdutosPRECODEVENDA.Value > 0;

    end
    else
    begin

      edtQuantidade.Value     := 1;
      edtValorUnitario.Value  := dmMProvider.cdsPesqProdutosPRECODEVENDA.Value;

    end;

  end;

end;

function TfrmItemPecaPadrao.AbrirTabelaProdutos(pOpcao: smallint;
  pConteudo: string): boolean;
var
  sWhere:string;
begin

  dmMProvider.cdsPesqProdutos.Close;
  dmMProvider.cdsPesqProdutos.ProviderName := 'dspPesqProdutos';

  dmDBEXMaster.fdqPesqProdutos.SQL.Clear;

  dmDBEXMaster.fdqPesqProdutos.SQL.Add('SELECT PRO.*, PF.*, UND.PERMITE_VENDA_FRACIONADA  as FRACAO FROM PRODUTO PRO');
  dmDBEXMaster.fdqPesqProdutos.SQL.Add('JOIN PRODUTOFILIAL PF');
  dmDBEXMaster.fdqPesqProdutos.SQL.Add('ON(PF.PRODUTO = PRO.PRODUTO)');
  dmDBEXMaster.fdqPesqProdutos.SQL.Add('JOIN UNIDADE_MEDIDA UND');
  dmDBEXMaster.fdqPesqProdutos.SQL.Add('ON(UND.UNIDADE = PRO.UNIDADE)');

  sWhere := dmDBEXMaster.Montar_SQL_Pesquisa_Produtos(pOpcao,1,pConteudo);

  dmDBEXMaster.fdqPesqProdutos.SQL.Add(sWhere);
  dmDBEXMaster.fdqPesqProdutos.SQL.Add('AND PRO.VISIBILIDADE = 1');
  dmDBEXMaster.fdqPesqProdutos.SQL.Add('ORDER BY PRO.DESCRICAO');

  try

    dmMProvider.cdsPesqProdutos.Open;
    dmMProvider.cdsPesqProdutos.ProviderName := '';

    if (dmMProvider.cdsPesqProdutos.IsEmpty) then
    begin

      lblMsg.Caption := dmDBEXMaster.sNomeUsuario + MSG_PESQUISA + ' - ' + Trim(edtConteudoPesquisa.Text);
      TocarSomAlerta(ord(SystemHand));
      edtConteudoPesquisa.SetFocus;

    end;

    Result := not dmMProvider.cdsPesqProdutos.IsEmpty;

   except
    on E: exception do
      lblMsg.Caption := dmDBEXMaster.sNomeUsuario+ ', ' + Tratar_Erro_Conexao(E) + ' ' + edtConteudoPesquisa.Text;

  end;

end;

procedure TfrmItemPecaPadrao.edtConteudoPesquisaEnter(Sender: TObject);
begin

   MudarCorEdit(Sender);

end;

procedure TfrmItemPecaPadrao.edtConteudoPesquisaExit(Sender: TObject);
begin

  LimparMSG_ERRO;

  if Length(Trim(edtConteudoPesquisa.Text)) > 0 then
  begin

    if AbrirTabelaProdutos(rdgOpcoesPesquisa.ItemIndex, edtConteudoPesquisa.Text) then
      grdPecas.SetFocus;

    edtConteudoPesquisa.Clear;

  end;

  MudarCorEdit(Sender);


end;

procedure TfrmItemPecaPadrao.edtConteudoPesquisaKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
var
  iDirecao: Integer;
begin

  // habilita movimentação dos campos com as setas acima/abaixo
  iDirecao := -1;

  case Key of

    VK_DOWN:
      iDirecao := 0; { Próximo }
    VK_UP:
      iDirecao := 1; { Anterior }

  end;

  if iDirecao <> -1 then
  begin

    Perform(WM_NEXTDLGCTL, iDirecao, 0);
    Key := 0;

  end;

end;

procedure TfrmItemPecaPadrao.edtConteudoPesquisaKeyPress(Sender: TObject;
  var Key: Char);
begin

  if Key = #13 then
  begin

    Key := #0;
    PostMessage(Handle, WM_KEYDOWN, VK_TAB, 1);

  end

end;

procedure TfrmItemPecaPadrao.edtQuantidadeKeyPress(Sender: TObject;
  var Key: Char);
begin


  if Key = FormatSettings.DecimalSeparator then
    Key := ',';

  if Key = #13 then
  begin

    Key := #0;
    PostMessage(Handle, WM_KEYDOWN, VK_TAB, 1);

  end;


end;

procedure TfrmItemPecaPadrao.FormCreate(Sender: TObject);
var
  i:integer;
begin

  DesabilitarBotaoFecharForm(self.Handle);
  Color := COR_PADRAO_DIALOGOS;

  dmMSProcedure.fdspMaster.StoredProcName := 'RETORNAR_GNR_ITEM_OS_SERVICO';
  dmMSProcedure.fdspMaster.Prepare;
  dmMSProcedure.fdspMaster.ExecProc;

  edtQuantidade.Value := 1;

  for i := 0 to grdPecas.Columns.Count - 1 do
    grdPecas.Columns[i].Title.Color := COR_TITULO_GRADE;

  dtpDataUtilizacao.Date := Date;

  grdPecas.Columns[4].Visible := (dmMProvider.cdsUsuariosSUPER_USUARIO.Value = 1);

end;

procedure TfrmItemPecaPadrao.FormKeyPress(Sender: TObject; var Key: Char);
begin

  try

    if (UpperCase(Key) = 'S') and (lblMsg.Tag = ord(SelecionarCustoVendaPeca))  then
    begin

      Key                     := #0;
      lblMsg.Tag              := ord(nulo);
      edtQuantidade.Value     := 1;
      edtValorUnitario.Value  := dmMProvider.cdsPesqProdutosCUSTOLIQUIDO.Value;
      LimparMSG_ERRO;

    end
    else if (UpperCase(Key) = 'N') and (lblMsg.Tag = ord(SelecionarCustoVendaPeca))  then
    begin

      Key                     := #0;
      lblMsg.Tag              := ord(nulo);
      edtQuantidade.Value     := 1;
      edtValorUnitario.Value  := dmMProvider.cdsPesqProdutosPRECODEVENDA.Value;
      LimparMSG_ERRO;

    end;
  except
    on E: exception do
    begin

      Tratar_Erro_Conexao(E);
      dmDBEXMaster.fdcMaster.Rollback;

    end;

  end;

end;

procedure TfrmItemPecaPadrao.grdPecasDblClick(Sender: TObject);
begin

  if not (dmMProvider.cdsPesqProdutos.IsEmpty) then
    Selecionar_TipoPreço;

end;

procedure TfrmItemPecaPadrao.grdPecasDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin

  if not dmMProvider.cdsPesqProdutos.IsEmpty then
  begin

    if not odd(dmMProvider.cdsPesqProdutos.RecNo) then
    begin

      grdPecas.Canvas.Font.Color   := clBlack;
      grdPecas.Canvas.Brush.Color  := COR_ZEBRA_GRADE;

    end
    else
    begin

      grdPecas.Canvas.Font.Color   := clBlack;
      grdPecas.Canvas.Brush.Color  := clWhite;

    end;

    grdPecas.Canvas.FillRect(Rect);
    grdPecas.DefaultDrawDataCell(Rect, Column.Field, State);

  end;

end;

procedure TfrmItemPecaPadrao.grdPecasKeyPress(Sender: TObject; var Key: Char);
begin

  if key = #13  then
    grdPecasDblClick(self);

end;

procedure TfrmItemPecaPadrao.imgConfirmarClick(Sender: TObject);
begin

  if (cboTecnicoResponsavel.KeyValue <= 0) and (rdgTipoPeca.ItemIndex < 3) then
  begin

    lblMsg.Caption := dmDBEXMaster.sNomeUsuario + MSG_CAMPO_OBRIGATORIO;
    Application.ProcessMessages;

    cboTecnicoResponsavel.SetFocus;

  end
  else if rdgTipoPeca.ItemIndex = 3 then
    ModalResult := mrOk
  else
  begin

    if PesquisarItensOSPecas then
    begin

      if rdgTipoPeca.ItemIndex < 0 then
      begin

        lblMsg.Caption  := dmDBEXMaster.sNomeUsuario + MSG_INFORMAR_TIPO_PECA;
        ModalResult     := mrNone;

      end
      else
      begin

        if not dmMProvider.cdsItens_OS_Pecas.Active then
          dmMProvider.cdsItens_OS_Pecas.Open;

        //verificar se item é ficha técnica
        dmMProvider.cdsProducao.Close;
        dmMProvider.cdsProducao.ProviderName := 'dspProducao';

        dmDBEXMaster.fdqProducao.SQL.Clear;
        dmDBEXMaster.fdqProducao.SQL.Clear;

        dmDBEXMaster.fdqProducao.SQL.Clear;
        dmDBEXMaster.fdqProducao.SQL.Add('select * from producao');
        dmDBEXMaster.fdqProducao.SQL.Add('where produto =  ' + IntToStr(dmMProvider.cdsPesqProdutosPRODUTO.Value));

        dmMProvider.cdsProducao.Open;
        dmMProvider.cdsProducao.ProviderName := '';

        if not dmMProvider.cdsProducao.IsEmpty then
        begin

          dmMProvider.cdsItemProducao.Close;
          dmMProvider.cdsItemProducao.ProviderName := 'dspItemProducao';

          dmDBEXMaster.fdqItemProducao.SQL.Clear;
          dmDBEXMaster.fdqItemProducao.SQL.Add('select *  from itemproducao');
          dmDBEXMaster.fdqItemProducao.SQL.Add('where producao = ' + IntToStr(dmMProvider.cdsProducaoPRODUCAO.Value));
          dmDBEXMaster.fdqItemProducao.SQL.Add('order by itemproducao');

          dmMProvider.cdsItemProducao.Open;
          dmMProvider.cdsItemProducao.ProviderName := '';

          if not dmMProvider.cdsItemProducao.IsEmpty then
          begin

            while not dmMProvider.cdsItemProducao.eof do
            begin

              dmMProvider.cdsItens_OS_Pecas.Append;
              dmMProvider.cdsItens_OS_PecasCODIGO_PECA.Value    := dmMProvider.cdsItemProducaoPRODUTO.Value;
              dmMProvider.cdsItens_OS_PecasDESCRICAO.Value      := dmMProvider.cdsItemProducaoDESCRICAO_PRODUTO.Value;
              dmMProvider.cdsItens_OS_PecasVALOR_UNITARIO.Value := dmMProvider.cdsItemProducaoCUSTO_LIQUIDO.Value;
              dmMProvider.cdsItens_OS_PecasFUNCIONARIO.Value    := dmMProvider.cdsFuncionariosFUNCIONARIO.Value;
              dmMProvider.cdsItens_OS_PecasQUANTIDADE.Value     := dmMProvider.cdsItemProducaoQUANTIDADE.Value;
              dmMProvider.cdsItens_OS_PecasTIPO.Value           := 0;
              dmMProvider.cdsItens_OS_PecasDIA.AsDateTime       := Date;
              dmMProvider.cdsItens_OS_PecasVALOR_TOTAL.Value    := (dmMProvider.cdsItens_OS_PecasQUANTIDADE.Value * dmMProvider.cdsItens_OS_PecasVALOR_UNITARIO.Value);

              frmOrdemServico.Man_Tab_ItenOS_Pecas(0, dmMProvider.cdsItens_OS_PecasITENS_OS_PECAS.Value);

              dmMProvider.cdsItemProducao.Next;

            end;

          end;

          ModalResult := mrOk;

        end
        else
        begin

          dmMProvider.cdsItens_OS_Pecas.Append;
          dmMProvider.cdsItens_OS_PecasCODIGO_PECA.Value    := dmMProvider.cdsPesqProdutosPRODUTO.Value;
          dmMProvider.cdsItens_OS_PecasDESCRICAO.Value      := dmMProvider.cdsPesqProdutosDESCRICAO.Value;
          dmMProvider.cdsItens_OS_PecasVALOR_UNITARIO.Value := edtValorUnitario.Value;
          dmMProvider.cdsItens_OS_PecasFUNCIONARIO.Value    := dmMProvider.cdsFuncionariosFUNCIONARIO.Value;
          dmMProvider.cdsItens_OS_PecasQUANTIDADE.Value     := edtQuantidade.Value;
          dmMProvider.cdsItens_OS_PecasTIPO.Value           := rdgTipoPeca.ItemIndex;;
          dmMProvider.cdsItens_OS_PecasDIA.AsDateTime       := dtpDataUtilizacao.DateTime;
          dmMProvider.cdsItens_OS_PecasVALOR_TOTAL.Value    := (dmMProvider.cdsItens_OS_PecasQUANTIDADE.Value * dmMProvider.cdsItens_OS_PecasVALOR_UNITARIO.Value);
          dmMProvider.cdsItens_OS_Pecas.Post;

          ModalResult := mrOk

        end;

      end;

    end
    else
    begin

      lblMsg.Caption  := dmDBEXMaster.sNomeUsuario + MSG_VALIDAR_ITEM_OS_PECA;
      ModalResult     := mrNone;

    end;

  end;

end;

procedure TfrmItemPecaPadrao.imgSairClick(Sender: TObject);
begin

  Close;

end;

procedure TfrmItemPecaPadrao.LimparMSG_ERRO;
begin

  lblMsg.Caption := '';
  Application.ProcessMessages;

end;

end.
